package main

import (
	"bytes"
	"fmt"
	"log"
	"sort"
	"strings"
)

const LOGLEVEL = 2

func acsLog(level int, p ...interface{}) {
	if level <= LOGLEVEL {
		fmt.Println(p...)
	}
}

func assert(b bool, s string) {
	if !b {
		log.Fatal(s)
	}
}

func assertErr(err error) {
	if err != nil {
		log.Fatal(err)
	}
}

type point struct {
	p0, p1 int
}

func (p *point) add(p2 point) {
	p.p0 += p2.p0
	p.p1 += p2.p1
}

type rectangle struct {
	d point
	n int
	v []rune
}

func newRectangle(d point) rectangle {
	n := d.p0 * d.p1
	return rectangle{v: make([]rune, n), d: d, n: n}
}

func newRectangleFromString(s string) rectangle {
	lines := strings.Split(s, "\n")
	rect := newRectangle(point{len(lines), len(lines[0])})
	for i, line := range lines {
		for j, r := range line {
			rect.paint(point{i, j}, r)
		}
	}
	return rect
}

func (r *rectangle) paint(p point, ru rune) {
	r.v[p.p0*r.d.p1+p.p1] = ru
}

func (r *rectangle) get(p point) rune {
	return r.v[p.p0*r.d.p1+p.p1]
}

func (r *rectangle) translate(i int) point {
	return point{i / r.d.p0, i % r.d.p0}
}

func isSmall(r rune) bool {
	return 'a' <= r && r <= 'z'
}

func isBig(r rune) bool {
	return 'A' <= r && r <= 'Z'
}

func toSmall(r rune) rune {
	return r - 'A' + 'a'
}

type step struct {
	p    int
	dist int
}

type path struct {
	key  rune
	p    int
	dist int
}

func pathsToString(paths []path) string {
	buf := bytes.Buffer{}
	fmt.Fprintf(&buf, "available: %v: [", len(paths))
	for i, path := range paths {
		if i != 0 {
			fmt.Fprintf(&buf, ", ")
		}
		fmt.Fprintf(&buf, "%c: %v", path.key, path.dist)
	}
	fmt.Fprintf(&buf, "]")
	return buf.String()
}

func p1() {
	r := newRectangleFromString(input)
	orig := -1
	keys := ""
	keyPos := map[rune]int{}
	for i := 0; i < r.n; i++ {
		if r.v[i] == '@' {
			orig = i
		}
		if isSmall(r.v[i]) {
			k := r.v[i]
			keys = keys + string(k)
			_, p := keyPos[k]
			assert(p == false, "multiple key: "+string(k))
			keyPos[k] = i
		}
	}
	acsLog(1, "N:", r.n)
	acsLog(1, "Start:", r.translate(orig))
	nKeys := len(keys)
	acsLog(1, "Keys:", keys, nKeys)

	hasKeys := map[rune]bool{}
	dir := []int{-1, +1, -r.d.p0, +r.d.p0}
	bufArr := [10000]step{}
	bfs := func(start int) []path {
		buf := bufArr[:0]
		visited := map[int]bool{}
		buf = append(buf, step{start, 0})
		visited[start] = true
		keyDist := []path{}
		for 0 < len(buf) {
			s := buf[0]
			buf = buf[1:]
			for _, nextD := range dir {
				next := s.p + nextD
				if visited[next] {
					continue
				}
				ru := r.v[next]
				if ru == '.' ||
					(isSmall(ru) && hasKeys[ru]) ||
					(isBig(ru) && hasKeys[toSmall(ru)]) {
					buf = append(buf, step{next, s.dist + 1})
					visited[next] = true
				}
				if isSmall(ru) && !hasKeys[ru] {
					visited[next] = true
					keyDist = append(keyDist, path{ru, next, s.dist + 1})
				}
			}
		}
		return keyDist
	}
	acsLog(2, "First keys", pathsToString(bfs(orig)))
	var backTrack func(start, distSoFar int)
	solution := -1
	partialBest := map[string]int{}
	backTrack = func(start, distSoFar int) {
		if solution != -1 && solution < distSoFar {
			return
		}
		if len(hasKeys) == nKeys {
			if solution == -1 || distSoFar < solution {
				solution = distSoFar
				acsLog(1, "Found solution: ", solution)
			}
		}
		nextKeys := bfs(start)
		orderedKeys := []string{}
		for k := range hasKeys {
			orderedKeys = append(orderedKeys, string(k))
		}
		sort.Strings(orderedKeys)
		prefix := strings.Join(orderedKeys, "")
		if len(hasKeys) < 5 {
			acsLog(2, "backtrack: ", len(hasKeys), "children: ", len(nextKeys))
			// acsLog(2, "prefix: ", prefix)
		}

		for _, path := range nextKeys {

			partial := prefix + string(path.key)
			bestSoFar, seen := partialBest[partial]
			if seen && bestSoFar <= distSoFar+path.dist {
				continue
			}
			partialBest[partial] = distSoFar + path.dist
			hasKeys[path.key] = true
			backTrack(keyPos[path.key], distSoFar+path.dist)
			delete(hasKeys, path.key)
		}
	}
	backTrack(orig, 0)
	acsLog(0, "Solution: ", solution)
}

func p2() {
	r := newRectangleFromString(input2)
	origs := []int{}
	keys := ""
	keyPos := map[rune]int{}
	for i := 0; i < r.n; i++ {
		if r.v[i] == '@' {
			origs = append(origs, i)
		}
		if isSmall(r.v[i]) {
			k := r.v[i]
			keys = keys + string(k)
			_, p := keyPos[k]
			assert(p == false, "multiple key: "+string(k))
			keyPos[k] = i
		}
	}
	acsLog(1, "N:", r.n)
	acsLog(1, "origs:", origs)
	nKeys := len(keys)
	acsLog(1, "Keys:", keys, nKeys)

	hasKeys := map[rune]bool{}
	dir := []int{-1, +1, -r.d.p0, +r.d.p0}
	bufArr := [10000]step{}
	bfs := func(start int) []path {
		buf := bufArr[:0]
		visited := map[int]bool{}
		buf = append(buf, step{start, 0})
		visited[start] = true
		keyDist := []path{}
		for 0 < len(buf) {
			s := buf[0]
			buf = buf[1:]
			for _, nextD := range dir {
				next := s.p + nextD
				if visited[next] {
					continue
				}
				ru := r.v[next]
				if ru == '.' ||
					(isSmall(ru) && hasKeys[ru]) ||
					(isBig(ru) && hasKeys[toSmall(ru)]) {
					buf = append(buf, step{next, s.dist + 1})
					visited[next] = true
				}
				if isSmall(ru) && !hasKeys[ru] {
					visited[next] = true
					keyDist = append(keyDist, path{ru, next, s.dist + 1})
				}
			}
		}
		return keyDist
	}
	// acsLog(2, "First keys", pathsToString(bfs(orig)))
	var backTrack func(bots [4]int, botKeys [4]rune, distSoFar int)
	solution := -1
	partialBest := map[string]int{}
	backTrack = func(bots [4]int, botKeys [4]rune, distSoFar int) {
		if solution != -1 && solution < distSoFar {
			return
		}
		if len(hasKeys) == nKeys {
			if solution == -1 || distSoFar < solution {
				solution = distSoFar
				acsLog(1, "Found solution: ", solution)
			}
		}
		orderedKeys := []string{}
		for k := range hasKeys {
			orderedKeys = append(orderedKeys, string(k))
		}
		sort.Strings(orderedKeys)
		prefix := strings.Join(orderedKeys, "")
		partial := prefix + "-" + string(botKeys[:])
		bestSoFar, seen := partialBest[partial]
		if seen && bestSoFar <= distSoFar {
			return
		}
		partialBest[partial] = distSoFar
		if len(hasKeys) < 5 {
			acsLog(2, "backtrack: ", len(hasKeys))
		}

		for bot, botPos := range bots {
			nextKeys := bfs(botPos)
			for _, path := range nextKeys {
				bots2 := bots
				bots2[bot] = keyPos[path.key]
				botKeys2 := botKeys
				botKeys2[bot] = path.key

				hasKeys[path.key] = true
				backTrack(bots2, botKeys2, distSoFar+path.dist)
				delete(hasKeys, path.key)
			}
		}
	}
	backTrack([4]int{origs[0], origs[1], origs[2], origs[3]}, [4]rune{'.', '.', '.', '.'}, 0)
	acsLog(0, "Solution: ", solution)
}

func main() {
	// p1() // 4900
	p2() // 2462
}

const input = `#################################################################################
#.........#.........#...#..q#.....#.....#.................#..........e......#...#
#####.###.###.#####.#.#.#.#.#.###.#.###.#.#####.#.#######.###############.#.###.#
#.....#..i....#...#.#.#.#.#.#.#.#.#.#.#.#.....#.#.#....z#.....C.........#.#.....#
#.###.###########.#.#.###.#.#.#.#.#.#.#.#####.#.#.#.###.###############.#.#####.#
#...#.#.........#.#.#...#.#.....#d#.#j..#.....#.#.#.#...#.........#.....#...#...#
###.###.#####.#.#.#.###.#.#######.#.###.#.#####.#.#.#.###.#######.#####.###.#.###
#...#...#...#.#.#.......#.#.#.....#...#.#.#.#...#.#.#.#.........#.#...#.....#...#
#.###.###.#.###.#######.#.#.#.#####.#.###.#.#.###.#.#.#.#######.#.#.#.#########.#
#...#.#...#.....#...#...#...#.#...#.#...#...#.#...#.#...#...#...#...#.#.....#...#
#.#.#.#.#.#####.#.#.#######.#.###.#.###.#.###K#####.#####.#.#########.#.#####.###
#.#...#.#.#...#.#.#.........#...#.#...#.#.#...#...#.....#.#.#........v#.......#.#
#.#####.###.#.#.#.###########.#.#.###.#N#.#.###.#.#####.#L#.#.#############.###.#
#.#...#.....#.#.#.#...#.....#.#.#.#...#.#.#.#...#.....#.#.#.#.....#.......#.....#
#.#.#.#######.###.#.###.###.###.#.#.###.###.#.#######.#.#.#.#.###.#.#####.#####.#
#.#.#.......#.....#...#.#.......#.#...#.#...#...#.S.#.#.#.#.#...#.#....y#.#.#...#
#.#.#####.#.#########.#.#########.#.###.#.#.###.#.#.#.#.#.#G#####.#####.#.#.#.###
#.#.....#.#.#.........#.W.#.....#.#.#...#.#.#...#.#.#...#.#.#.......#...#.#...#.#
#.#######.#.###.###.#####.#.#.#.#.#.#.#.#.###.###.#.#.###.#.#.#####.#T###.#.###.#
#.......#.#.....#.#.#.....#.#.#.#...#.#.#.#...#...#.#...#.#.#.....#.#...#.#.#...#
#######.#.#######.#.#.#######.#.#.###.###.#.###.###.#####.#.#####.#####.#.#.#.#.#
#.#.....#.#.......#.#.#.....#.#.#...#...#...#.#.#.#.......#.#...#.......#.#...#.#
#.#.#####.#.#.###.#.###.###.#.#.#####.#.#.###.#.#.#########.###.#######.#.#####.#
#...#.....#r#...#.#.....#.#...#.....#.#.#.....#.....A.#...#..p..#.....#.#.#.....#
#.#####.#######.#########.#########.###.#####.#######.#.#########.###.###.#####.#
#.......#.....#.......#...#.......#...#.#.#...#.....#.#.......H...#.....#.....#.#
###########.#.###.#####.#.#.#####.###.#.#.#.###.#.#.#.#####.#.#########.###.#.###
#.........#.#.....#.....#.#.....#...#...#.#...#.#.#.#.#...#.#.......#.#...#.#...#
#.#######.#.#####.#.#####.#####.###.###.#.###.###.###.#.#M###.#####.#.###.#####R#
#...#...#.#.....#.#.#...#.....#.#.#...#.#...#...#...#...#...#...#...#...#...#...#
###.#.#.#.#####.###.#.#######.#.#.#.###.#.#.###.###.#######.###.#.###.#.###.#.###
#...#.#...#...#.#...#.......#.....#.#...#.#.#...#...#.....#...#.#...#.#.#...#...#
#.#######.#.#.#.#.###.#####.#######.#O###.###.###.###.###.###.#.###.#.#.#.#####.#
#.#.....#.#.#...#...#.#.#.......#...#...#.....#...#...#.#.#...#.#.#.#.#.#.....#.#
#.#.###.#.#.#.#####.#.#.#.#.#####.#####.#.#######.#.###.#.#.###.#.#B###.#####.#.#
#.#.#...#...#.#.....#...#.#.#...#.#.....#.....#...#...#.#...#.....#...#.....#.#.#
#.#E#.#########.#####.###.#.#.#.#.#.#########.#.#####.#.#############.#.#####.#.#
#...#.#.......#.....#.#...#.#.#...#.#...#...#.#.#.....#.....#.......#.#.......#.#
#.###.#.#####.#####.###.###.#.#####.###.#.#.#.#.#.#####.###.#.#####.#.#.#######.#
#...#.......#...........#...#.............#.....#.......#.....#......x#.........#
#######################################.@.#######################################
#.......#.......#.....................#.......#...#...#.....#.......#...#.......#
#.#######.#####.#.#.#################.#.#####.#.#.#.#.#.###.#.#####.#.#.#.###.#.#
#...#.....#...#...#.....#.......#.....#.#...#...#.#.#...#.#.#.#...#...#...#...#.#
#.#.#.#####.#.#########.#.###.###.#####.#.#.###.#.#.#####.#.#.#.###########.###.#
#.#.#.......#.......#...#...#...#.....#.#.#...#.#.#.#.....#...#.......#.#...#...#
#.#.#####.#####.#####.#########.#####.#.#.###.###.#.#.#.#########.###.#.#.###.###
#.#...#...#...#.#.....#...........#...#.#.#.#.#...#.#.#...........#.....#...#...#
#####.#.###.#.###.#####.#.#.#######.###.#.#.#.#.#.#.#.#######.#.#########.#.###.#
#.....#.#...#.....#.....#.#.#....o......#k#...#.#.#.#.#.......#.#.......#.#...#.#
#.#####.#.#############.#.###.#########.#.###.#.#.#.#.#.#######.#.#####.#####.#.#
#..c....#.#.....#.....#.#.......#.....#.#...#n..#.#.#.#...#.#...#...#.....#...#.#
#.#####.#.#.###.#.###.#######.###.###.#.#.#.#######.#####.#.#.#####.#####.#.#####
#.#...#.#.....#.....#.#f....#.#...#...#.#.#...#...#.......#.#.#.#...#..u#.#.....#
###.#.###############.#.###.#.#.#####.#.#####.#.#.#########.#.#.#.#.#.#.#.#.###.#
#...#.#...............#...#.#.#.....#.#.#...#.#.#...#.......#...#.#.#.#.#.#.#...#
#.###.#.#######Z#########.#.#.#####.#.#.#.#.#.#.#.###.#.#######.#.###.#.#.###.###
#...#...#.......#...#.....#.#.#.....#.#.#.#.#.#.#.....#.....#...#.....#.#...#...#
#.#.###.#########.#.#.#####.###.#####.###.#.#.#.#######.###.#.#########.###.#.#.#
#.#...#.#.........#.#.#...#...U.#...#...#.#...#.#.....#...#.......#.#...#...#.#.#
#.###.###.#########.#.#.###########.###.#.#.###.#.###.###########.#.#.###.#####.#
#.#.#.#.V.#.....#...#.#.............#...#.#.#...#.#...#.P.....#...#.#.#...#....w#
#.#.#.#.###.#.###.#.#############.#.#.###.###.###.#.###.#######.###.#.#.###.#####
#...#...#...#.#...#.#.....#.......#.#...#...#...#.#.....#.....#.#...#.#...#.....#
###.#####.###.#.###.#.###.#.###########.#.#J###.#.#########.#.#.#.###.###.###.#.#
#.#...#.....#.#.#...#.#.....#.......#...#.#.....#.#.....#...#.#.#...#...#...#.#.#
#.###.#####.###.#.###.#######.#####.#.###.#######.#.#.#.#.###.#.###.###.###.###.#
#...#.......#...#.....#.......#...#...#.#.#...#...#s#.#.#a#...#.....#...#.#.....#
#.###.#######.#####.###.#######.#.#####.#.#.#.#.#####.#.#.#.#####.###F###.#####.#
#.....#.......#...#.#...#.....#.#.....#.#.#.#.#g..#...#...#.....#.#...#.......#.#
#.#####.#######.#.#.#.#####.#.###.###.#.#.#.#####.#.###########.###.###.#######.#
#...#.#.....#...#...#.......#...#.#...#.#.#.....#.#.#...#.....#..m..#.......#...#
###.#.#####.#.#################.#.#.###.#.#.###.#.#.#.#.#.#.#.#############.#.###
#...#.#.....#.#.......#.#.D.....#.#.....#.#...#.#.#.#.#...#.#.....#.......#.#...#
#.###.#Y#####.#.#####.#.#.#######.#####.#.#####.#.#.###.###.#######.#.###.#.###.#
#.#...#...#.#...#...#...#.....#...#h#...#.......#.#...#...#...#...#.#...#.#...#.#
#.#.#.###.#.###.#.#.###.#####.#.###.#.#######.###.#.#.###.###.#.#.#.###.#.#.###.#
#.#.#...#.#.....#.#...#.#.....#...#.#.#.#.....#...#.#.#.#.#.#.#.#.#.#.#.#...#...#
#I#####.#.#######.###.###Q#######.#.#.#.#.#####.#####.#.#.#.#.#X#.#.#.#.#####.###
#t......#...........#.............#.....#.....#....l..#.....#...#.....#..b......#
#################################################################################`

const input2 = `#################################################################################
#.........#.........#...#..q#.....#.....#.................#..........e......#...#
#####.###.###.#####.#.#.#.#.#.###.#.###.#.#####.#.#######.###############.#.###.#
#.....#..i....#...#.#.#.#.#.#.#.#.#.#.#.#.....#.#.#....z#.....C.........#.#.....#
#.###.###########.#.#.###.#.#.#.#.#.#.#.#####.#.#.#.###.###############.#.#####.#
#...#.#.........#.#.#...#.#.....#d#.#j..#.....#.#.#.#...#.........#.....#...#...#
###.###.#####.#.#.#.###.#.#######.#.###.#.#####.#.#.#.###.#######.#####.###.#.###
#...#...#...#.#.#.......#.#.#.....#...#.#.#.#...#.#.#.#.........#.#...#.....#...#
#.###.###.#.###.#######.#.#.#.#####.#.###.#.#.###.#.#.#.#######.#.#.#.#########.#
#...#.#...#.....#...#...#...#.#...#.#...#...#.#...#.#...#...#...#...#.#.....#...#
#.#.#.#.#.#####.#.#.#######.#.###.#.###.#.###K#####.#####.#.#########.#.#####.###
#.#...#.#.#...#.#.#.........#...#.#...#.#.#...#...#.....#.#.#........v#.......#.#
#.#####.###.#.#.#.###########.#.#.###.#N#.#.###.#.#####.#L#.#.#############.###.#
#.#...#.....#.#.#.#...#.....#.#.#.#...#.#.#.#...#.....#.#.#.#.....#.......#.....#
#.#.#.#######.###.#.###.###.###.#.#.###.###.#.#######.#.#.#.#.###.#.#####.#####.#
#.#.#.......#.....#...#.#.......#.#...#.#...#...#.S.#.#.#.#.#...#.#....y#.#.#...#
#.#.#####.#.#########.#.#########.#.###.#.#.###.#.#.#.#.#.#G#####.#####.#.#.#.###
#.#.....#.#.#.........#.W.#.....#.#.#...#.#.#...#.#.#...#.#.#.......#...#.#...#.#
#.#######.#.###.###.#####.#.#.#.#.#.#.#.#.###.###.#.#.###.#.#.#####.#T###.#.###.#
#.......#.#.....#.#.#.....#.#.#.#...#.#.#.#...#...#.#...#.#.#.....#.#...#.#.#...#
#######.#.#######.#.#.#######.#.#.###.###.#.###.###.#####.#.#####.#####.#.#.#.#.#
#.#.....#.#.......#.#.#.....#.#.#...#...#...#.#.#.#.......#.#...#.......#.#...#.#
#.#.#####.#.#.###.#.###.###.#.#.#####.#.#.###.#.#.#########.###.#######.#.#####.#
#...#.....#r#...#.#.....#.#...#.....#.#.#.....#.....A.#...#..p..#.....#.#.#.....#
#.#####.#######.#########.#########.###.#####.#######.#.#########.###.###.#####.#
#.......#.....#.......#...#.......#...#.#.#...#.....#.#.......H...#.....#.....#.#
###########.#.###.#####.#.#.#####.###.#.#.#.###.#.#.#.#####.#.#########.###.#.###
#.........#.#.....#.....#.#.....#...#...#.#...#.#.#.#.#...#.#.......#.#...#.#...#
#.#######.#.#####.#.#####.#####.###.###.#.###.###.###.#.#M###.#####.#.###.#####R#
#...#...#.#.....#.#.#...#.....#.#.#...#.#...#...#...#...#...#...#...#...#...#...#
###.#.#.#.#####.###.#.#######.#.#.#.###.#.#.###.###.#######.###.#.###.#.###.#.###
#...#.#...#...#.#...#.......#.....#.#...#.#.#...#...#.....#...#.#...#.#.#...#...#
#.#######.#.#.#.#.###.#####.#######.#O###.###.###.###.###.###.#.###.#.#.#.#####.#
#.#.....#.#.#...#...#.#.#.......#...#...#.....#...#...#.#.#...#.#.#.#.#.#.....#.#
#.#.###.#.#.#.#####.#.#.#.#.#####.#####.#.#######.#.###.#.#.###.#.#B###.#####.#.#
#.#.#...#...#.#.....#...#.#.#...#.#.....#.....#...#...#.#...#.....#...#.....#.#.#
#.#E#.#########.#####.###.#.#.#.#.#.#########.#.#####.#.#############.#.#####.#.#
#...#.#.......#.....#.#...#.#.#...#.#...#...#.#.#.....#.....#.......#.#.......#.#
#.###.#.#####.#####.###.###.#.#####.###.#.#.#.#.#.#####.###.#.#####.#.#.#######.#
#...#.......#...........#...#..........@#@#.....#.......#.....#......x#.........#
#################################################################################
#.......#.......#.....................#@#@....#...#...#.....#.......#...#.......#
#.#######.#####.#.#.#################.#.#####.#.#.#.#.#.###.#.#####.#.#.#.###.#.#
#...#.....#...#...#.....#.......#.....#.#...#...#.#.#...#.#.#.#...#...#...#...#.#
#.#.#.#####.#.#########.#.###.###.#####.#.#.###.#.#.#####.#.#.#.###########.###.#
#.#.#.......#.......#...#...#...#.....#.#.#...#.#.#.#.....#...#.......#.#...#...#
#.#.#####.#####.#####.#########.#####.#.#.###.###.#.#.#.#########.###.#.#.###.###
#.#...#...#...#.#.....#...........#...#.#.#.#.#...#.#.#...........#.....#...#...#
#####.#.###.#.###.#####.#.#.#######.###.#.#.#.#.#.#.#.#######.#.#########.#.###.#
#.....#.#...#.....#.....#.#.#....o......#k#...#.#.#.#.#.......#.#.......#.#...#.#
#.#####.#.#############.#.###.#########.#.###.#.#.#.#.#.#######.#.#####.#####.#.#
#..c....#.#.....#.....#.#.......#.....#.#...#n..#.#.#.#...#.#...#...#.....#...#.#
#.#####.#.#.###.#.###.#######.###.###.#.#.#.#######.#####.#.#.#####.#####.#.#####
#.#...#.#.....#.....#.#f....#.#...#...#.#.#...#...#.......#.#.#.#...#..u#.#.....#
###.#.###############.#.###.#.#.#####.#.#####.#.#.#########.#.#.#.#.#.#.#.#.###.#
#...#.#...............#...#.#.#.....#.#.#...#.#.#...#.......#...#.#.#.#.#.#.#...#
#.###.#.#######Z#########.#.#.#####.#.#.#.#.#.#.#.###.#.#######.#.###.#.#.###.###
#...#...#.......#...#.....#.#.#.....#.#.#.#.#.#.#.....#.....#...#.....#.#...#...#
#.#.###.#########.#.#.#####.###.#####.###.#.#.#.#######.###.#.#########.###.#.#.#
#.#...#.#.........#.#.#...#...U.#...#...#.#...#.#.....#...#.......#.#...#...#.#.#
#.###.###.#########.#.#.###########.###.#.#.###.#.###.###########.#.#.###.#####.#
#.#.#.#.V.#.....#...#.#.............#...#.#.#...#.#...#.P.....#...#.#.#...#....w#
#.#.#.#.###.#.###.#.#############.#.#.###.###.###.#.###.#######.###.#.#.###.#####
#...#...#...#.#...#.#.....#.......#.#...#...#...#.#.....#.....#.#...#.#...#.....#
###.#####.###.#.###.#.###.#.###########.#.#J###.#.#########.#.#.#.###.###.###.#.#
#.#...#.....#.#.#...#.#.....#.......#...#.#.....#.#.....#...#.#.#...#...#...#.#.#
#.###.#####.###.#.###.#######.#####.#.###.#######.#.#.#.#.###.#.###.###.###.###.#
#...#.......#...#.....#.......#...#...#.#.#...#...#s#.#.#a#...#.....#...#.#.....#
#.###.#######.#####.###.#######.#.#####.#.#.#.#.#####.#.#.#.#####.###F###.#####.#
#.....#.......#...#.#...#.....#.#.....#.#.#.#.#g..#...#...#.....#.#...#.......#.#
#.#####.#######.#.#.#.#####.#.###.###.#.#.#.#####.#.###########.###.###.#######.#
#...#.#.....#...#...#.......#...#.#...#.#.#.....#.#.#...#.....#..m..#.......#...#
###.#.#####.#.#################.#.#.###.#.#.###.#.#.#.#.#.#.#.#############.#.###
#...#.#.....#.#.......#.#.D.....#.#.....#.#...#.#.#.#.#...#.#.....#.......#.#...#
#.###.#Y#####.#.#####.#.#.#######.#####.#.#####.#.#.###.###.#######.#.###.#.###.#
#.#...#...#.#...#...#...#.....#...#h#...#.......#.#...#...#...#...#.#...#.#...#.#
#.#.#.###.#.###.#.#.###.#####.#.###.#.#######.###.#.#.###.###.#.#.#.###.#.#.###.#
#.#.#...#.#.....#.#...#.#.....#...#.#.#.#.....#...#.#.#.#.#.#.#.#.#.#.#.#...#...#
#I#####.#.#######.###.###Q#######.#.#.#.#.#####.#####.#.#.#.#.#X#.#.#.#.#####.###
#t......#...........#.............#.....#.....#....l..#.....#...#.....#..b......#
#################################################################################`

package main

import (
	"bytes"
	"fmt"
	"log"
	"strings"
)

const LOGLEVEL = 2

func acsLog(level int, p ...interface{}) {
	if level <= LOGLEVEL {
		fmt.Println(p...)
	}
}

func assert(b bool, s string) {
	if !b {
		log.Fatal(s)
	}
}

func assertErr(err error) {
	if err != nil {
		log.Fatal(err)
	}
}

type point struct {
	p0, p1 int
}

func (p *point) add(p2 point) {
	p.p0 += p2.p0
	p.p1 += p2.p1
}

type rectangle struct {
	d point
	n int
	v []rune
}

func newRectangle(d point) rectangle {
	n := d.p0 * d.p1
	return rectangle{v: make([]rune, n), d: d, n: n}
}

func newRectangleFromString(s string) rectangle {
	lines := strings.FieldsFunc(s, func(r rune) bool {
		return r == 10
	})
	rect := newRectangle(point{len(lines) + 2, len(lines[0]) + 2})
	for i, line := range lines {
		for j, r := range " " + line + " " {
			rect.paint(point{i + 1, j}, r)
		}
	}
	return rect
}

func (r *rectangle) paint(p point, ru rune) {
	r.v[p.p0*r.d.p1+p.p1] = ru
}

func (r *rectangle) get(p point) rune {
	return r.v[p.p0*r.d.p1+p.p1]
}

func (r *rectangle) translate(i int) point {
	return point{i / r.d.p1, i % r.d.p1}
}

func isSmall(r rune) bool {
	return 'a' <= r && r <= 'z'
}

func isBig(r rune) bool {
	return 'A' <= r && r <= 'Z'
}

func toSmall(r rune) rune {
	return r - 'A' + 'a'
}

type step struct {
	p    int
	dist int
}

type path struct {
	key  rune
	p    int
	dist int
}

func pathsToString(paths []path) string {
	buf := bytes.Buffer{}
	fmt.Fprintf(&buf, "available: %v: [", len(paths))
	for i, path := range paths {
		if i != 0 {
			fmt.Fprintf(&buf, ", ")
		}
		fmt.Fprintf(&buf, "%c: %v", path.key, path.dist)
	}
	fmt.Fprintf(&buf, "]")
	return buf.String()
}

func p1(input string) {
	r := newRectangleFromString(input)
	ports := map[string][][2]int{}
	dirNext := []int{+1, +r.d.p1}
	for i := 0; i < r.n; i++ {
		if isBig(r.v[i]) {
			other := -1
			if isBig(r.v[i+dirNext[0]]) {
				other = i + dirNext[0]
			}
			if isBig(r.v[i+dirNext[1]]) {
				other = i + dirNext[1]
			}
			if other != -1 {
				port := string([]rune{r.v[i], r.v[other]})
				ports[port] = append(ports[port], [2]int{i, other})
			}
		}
	}
	portMap := map[int][2]int{}
	for portName, portPair := range ports {
		if portName == "AA" || portName == "ZZ" {
			continue
		}
		assert(len(portPair) == 2, "no port pair")
		portMap[portPair[0][0]] = portPair[1]
		portMap[portPair[0][1]] = portPair[1]
		portMap[portPair[1][0]] = portPair[0]
		portMap[portPair[1][1]] = portPair[0]
	}
	acsLog(1, "ports: ", len(ports))
	assert(len(ports["AA"]) == 1, "not 1 start or end")
	assert(len(ports["ZZ"]) == 1, "not 1 start or end")
	a0 := ports["AA"][0][0]
	a1 := ports["AA"][0][1]
	z0 := ports["ZZ"][0][0]
	z1 := ports["ZZ"][0][1]
	acsLog(1, "N:", r.n)

	bufArr := [20000]step{}
	dir := []int{-1, +1, -r.d.p1, +r.d.p1}
	buf := bufArr[:0]
	visited := map[int]bool{}
	buf = append(buf, step{a0, -1})
	visited[a0] = true
	buf = append(buf, step{a1, -1})
	visited[a1] = true

	solution := -1
	bufPos := 0
	for 0 < len(buf) {
		s := buf[0]
		buf = buf[1:]
		bufPos++
		// acsLog(2, "Expanding", s, "bufpos: ", bufPos)
		for _, nextD := range dir {
			next := s.p + nextD
			if visited[next] {
				continue
			}
			ru := r.v[next]
			if ru == '.' {
				buf = append(buf, step{next, s.dist + 1})
				visited[next] = true
			}
			if next == z0 || next == z1 {
				if solution == -1 {
					solution = s.dist
				}
			} else if isBig(ru) {
				// front append
				bufPos -= 2
				acsLog(2, bufPos, ":", len(buf)+2)
				buf = bufArr[bufPos : bufPos+len(buf)+2]
				p0 := portMap[next][0]
				buf[0] = step{p0, s.dist}
				visited[p0] = true
				p1 := portMap[next][1]
				buf[1] = step{p1, s.dist}
				visited[p1] = true
				acsLog(2, "Jumped to[", s.dist, "]: ", r.translate(p0), r.translate(p1))
			}
		}
	}
	acsLog(2, "solution: ", solution)
}

func p2(input string) {
	r := newRectangleFromString(input)
	ports := map[string][][2]int{}
	dirNext := []int{+1, +r.d.p1}
	for i := 0; i < r.n; i++ {
		if isBig(r.v[i]) {
			other := -1
			if isBig(r.v[i+dirNext[0]]) {
				other = i + dirNext[0]
			}
			if isBig(r.v[i+dirNext[1]]) {
				other = i + dirNext[1]
			}
			if other != -1 {
				port := string([]rune{r.v[i], r.v[other]})
				ports[port] = append(ports[port], [2]int{i, other})
			}
		}
	}

	level := func(p int) int {
		l := p / r.n
		if p < 0 {
			return l - 1
		}
		return l
	}
	levelPos := func(p int) int {
		lp := p % r.n
		if lp < 0 {
			return lp + r.n
		}
		return lp
	}

	portMap := map[int][2]int{}
	for portName, portPair := range ports {
		if portName == "AA" || portName == "ZZ" {
			continue
		}
		assert(len(portPair) == 2, "no port pair")
		outer := func(port [2]int) bool {
			p := r.translate(port[0])
			m := 5 //margin
			return p.p0 < m || r.d.p0 < p.p0+m ||
				p.p1 < m || r.d.p1 < p.p1+m
		}
		o0 := outer(portPair[0])
		o1 := outer(portPair[1])
		assert(o0 != o1, "not inout pair")
		oOut, oIn := portPair[1], portPair[0]
		if o0 {
			oOut, oIn = portPair[0], portPair[1]
		}
		oOutLeveled := oOut
		oOutLeveled[0] += r.n
		oOutLeveled[1] += r.n
		oInLeveled := oIn
		oInLeveled[0] -= r.n
		oInLeveled[1] -= r.n
		assert(level(oInLeveled[0]) < 0, "bad level")

		portMap[oIn[0]] = oOutLeveled
		portMap[oIn[1]] = oOutLeveled
		portMap[oOut[0]] = oInLeveled
		portMap[oOut[1]] = oInLeveled
	}
	// acsLog(1, "ports: ", ports)
	// acsLog(1, "portsMJ: ", r.translate(ports["MJ"][0][0]))
	// acsLog(1, "portsMJ: ", r.translate(ports["MJ"][0][1]))
	// acsLog(1, "portsMJ: ", r.translate(ports["MJ"][1][0]))
	// acsLog(1, "portsMJ: ", r.translate(ports["MJ"][1][1]))
	acsLog(1, "portsLen: ", len(ports))
	assert(len(ports["AA"]) == 1, "not 1 start or end")
	assert(len(ports["ZZ"]) == 1, "not 1 start or end")
	a0 := ports["AA"][0][0]
	a1 := ports["AA"][0][1]
	z0 := ports["ZZ"][0][0]
	z1 := ports["ZZ"][0][1]
	acsLog(1, "N:", r.n)

	dir := []int{-1, +1, -r.d.p1, +r.d.p1}
	bufArr := [1000000]step{}
	buf := bufArr[:0]
	visited := map[int]bool{}
	buf = append(buf, step{a0, -1})
	visited[a0] = true
	buf = append(buf, step{a1, -1})
	visited[a1] = true

	solution := -1
	bufPos := 0
	for 0 < len(buf) && buf[0].dist < 40000 && solution == -1 {
		s := buf[0]
		buf = buf[1:]
		bufPos++
		// acsLog(2, "Expanding", s, "bufpos: ", bufPos)
		for _, nextD := range dir {
			next := s.p + nextD
			if visited[next] {
				continue
			}
			ru := r.v[levelPos(next)]
			if ru == '.' {
				buf = append(buf, step{next, s.dist + 1})
				visited[next] = true
			}
			if next == z0 || next == z1 {
				acsLog(1, "found Z", level(next))
				if level(next) != 0 {
					continue
				}
				if solution == -1 {
					solution = s.dist
				}
			} else if isBig(ru) {
				// front append
				otherPort := portMap[levelPos(next)]
				nextLevel := level(next) + level(otherPort[0])
				if level(level(otherPort[0])) < 0 {
					acsLog(3, "found negative level")
				}
				if level(nextLevel) < 0 {
					continue
				}
				bufPos -= 2
				acsLog(3, bufPos, ":", len(buf)+2)
				buf = bufArr[bufPos : bufPos+len(buf)+2]
				p0 := levelPos(otherPort[0]) + nextLevel*r.n
				buf[0] = step{p0, s.dist}
				visited[p0] = true
				p1 := levelPos(otherPort[1]) + nextLevel*r.n
				buf[1] = step{p1, s.dist}
				visited[p1] = true
				acsLog(3, "Jumped to level ", nextLevel, "[", s.dist, "] from: ", r.translate(levelPos(next)),
					"to:", r.translate(levelPos(p0)), r.translate(levelPos(p1)))
			}
		}
	}
	acsLog(2, "solution: ", solution)
}

func main() {
	// p1(input) // 684
	p2(input) //
	// acsLog(2, -3/4)
}

const kicsi = `
         A           
         A           
  #######.#########  
  #######.........#  
  #######.#######.#  
  #######.#######.#  
  #######.#######.#  
  #####  B    ###.#  
BC...##  C    ###.#  
  ##.##       ###.#  
  ##...DE  F  ###.#  
  #####    G  ###.#  
  #########.#####.#  
DE..#######...###.#  
  #.#########.###.#  
FG..#########.....#  
  ###########.#####  
             Z       
             Z       `

const kicsi2 = `
             Z L X W       C                 
             Z P Q B       K                 
  ###########.#.#.#.#######.###############  
  #...#.......#.#.......#.#.......#.#.#...#  
  ###.#.#.#.#.#.#.#.###.#.#.#######.#.#.###  
  #.#...#.#.#...#.#.#...#...#...#.#.......#  
  #.###.#######.###.###.#.###.###.#.#######  
  #...#.......#.#...#...#.............#...#  
  #.#########.#######.#.#######.#######.###  
  #...#.#    F       R I       Z    #.#.#.#  
  #.###.#    D       E C       H    #.#.#.#  
  #.#...#                           #...#.#  
  #.###.#                           #.###.#  
  #.#....OA                       WB..#.#..ZH
  #.###.#                           #.#.#.#  
CJ......#                           #.....#  
  #######                           #######  
  #.#....CK                         #......IC
  #.###.#                           #.###.#  
  #.....#                           #...#.#  
  ###.###                           #.#.#.#  
XF....#.#                         RF..#.#.#  
  #####.#                           #######  
  #......CJ                       NM..#...#  
  ###.#.#                           #.###.#  
RE....#.#                           #......RF
  ###.###        X   X       L      #.#.#.#  
  #.....#        F   Q       P      #.#.#.#  
  ###.###########.###.#######.#########.###  
  #.....#...#.....#.......#...#.....#.#...#  
  #####.#.###.#######.#######.###.###.#.#.#  
  #.......#.......#.#.#.#.#...#...#...#.#.#  
  #####.###.#####.#.#.#.#.###.###.#.###.###  
  #.......#.....#.#...#...............#...#  
  #############.#.#.###.###################  
               A O F   N                     
               A A D   M                     `

const input = `
                                       S       Z       J       X   Q   X     L   Z     W                                         
                                       I       H       S       C   T   F     E   Z     N                                         
  #####################################.#######.#######.#######.###.###.#####.###.#####.#######################################  
  #.#...#...........#.....#...#.......#.#.....#.#.#...........#.......#...#...#...#.....#...#.#.#...#.....#...#.#.#...#.#.....#  
  #.#.#####.#######.#####.###.#####.###.#.###.#.#.#.#.#######.#.#.###.###.#.###.#.#####.#.###.#.###.#.#######.#.#.#.###.#.#####  
  #.#.#.#.#.#.#.......#.....#.#.#.#.....#.#...#...#.#.#.......#.#...#.#...#.....#.#...#.....................#.#.#.#.#.#.....#.#  
  #.#.#.#.###.#.###.###.###.#.#.#.#.###.#.#.###.#######.#.#.#.#######.#.#########.#.###.#########.#.#.#######.#.#.#.#.###.###.#  
  #.......#.....#.#.....#.....#.....#.....#...#...#...#.#.#.#.#.......#...#.....#.....#...#...#...#.#...................#.....#  
  #####.#########.###.#######.###.#####.###.###.###.#.#.#####.#######.###.###.#.#.#####.#####.#######.#.#.#.#.###.#####.#.#####  
  #...#...#...#...#...#...#.......#.#...#.#.#.....#.#.....#.....#.......#.#...#.#.#.......#.#.......#.#.#.#.#.#.....#.....#...#  
  #.###.###.#####.#######.###.###.#.#.###.#.###.#######.#######.#.###.###.#.###.#.#.#####.#.#.#.#####.###.###.###.###.#.#.#.###  
  #.........#.#...............#...#.#.#.#.....#...#.......#.....#.#...#.#.#.#.....#.....#.....#.....#...#.#...#.....#.#.#...#.#  
  #.#.###.###.#.#####.#####.#.###.#.###.#.#####.#######.#########.#.#.#.#.#.###.###.#####.#.#.###.###########.###.#########.#.#  
  #.#.#...#.#.#.#.#...#.....#.#.....#.........#.#...#.#.......#...#.#.#...#.#.#.#.#.....#.#.#...#.#.#...#.......#...#.#...#...#  
  #######.#.#.###.#######.#############.#.#.#.#.###.#.###.###########.#.###.#.###.#.#.#.###.###.###.#.###.###.#######.#.###.###  
  #.#...#.........#...#...#.#.....#.#.#.#.#.#.#...#.........#...#.....#...#.......#.#.#.#.....#.#...#...#.#...............#...#  
  #.###.#.#.#######.#.#.###.#####.#.#.#######.###.#####.#.#.#.#######.###.#.#.#####.###############.#.#####.#.#.#####.#####.###  
  #.#.#.#.#.#.#.....#.#.....#.#...#.#.....#...#...#.#.#.#.#.#.#...#...#...#.#...#.......#.......#.....#.....#.#.....#.....#.#.#  
  #.#.#.#.#.#.#####.###.###.#.#.#.#.###.###.#.###.#.#.#.#####.#.#####.###.#.#.#.###.#.#####.#######.#######.###.#.###########.#  
  #.....#.#.#.#...#.#...#.#.#.#.#.........#.#.#.....#.#.........#.......#.#.#.#.#...#...#.....#.......#...#.#.#.#.....#...#.#.#  
  ###.#####.#.###.#.###.#.###.#######.#.#####.###.###.###.#.#########.#.#.###.#######.###.#########.###.#####.#.#######.###.#.#  
  #.#...#.#.#.#...#...#.#...#.#...#.#.#...#.....#.......#.#.#...#.....#.#...#.....#.#.......#...#.#.#.......#.#...#.#...#.#.#.#  
  #.#.###.#.#.###.###.#####.#.#.###.###.###.#########.###.#####.###.#####.#######.#.#####.#####.#.#.#.###.###.#####.###.#.#.#.#  
  #...#.........#.......#.....................#.......#.........#.....#.....#.......#...#.......#.#.....#.#.#.#.#...#.....#.#.#  
  ###.###.###########.###.#.###.###.#.#######.#.#############.#######.#.#.#####.#####.#.#.#######.#.#######.#.#.#.#######.#.#.#  
  #.#...#.#.....#...#...#.#.#...#.#.#.#...#...#.....#.#...#...#.....#.#.#.#.#.#...#...#.................#.#.#...#...#.....#...#  
  #.#.###.#.#####.#.#.#####.###.#.#.###.#####.###.###.#.#.#.#####.#.#.###.#.#.###.###.###.#####.#########.#.###.#.#######.###.#  
  #...#.#.#...#.#.#.#.#.#...#...#...#.....#...#...#.....#...#.....#.....#.#...#...#.#...#...#.#.#...#.#...#.#.......#.#.#.....#  
  ###.#.#.#.###.###.#.#.#########.###.#.#.###.#.#.#####.###.###.###.#.###.#.#.#.###.###.#.###.#.#.###.###.#.###.#####.#.#.#####  
  #.....#.#...#...#.....#.........#...#.#.#...#.#...#.....#.#.....#.#.#...#.#...#...#...#.#...#.#.....#.#.....#...#...#.#.....#  
  ###.###.#.#####.#.###############.###.#.#.###.#.###.#.#######.#######.###.#######.#.###.###.###.###.#.#.#.###.#####.#.#.#####  
  #.........#.#.......#...#.#.#.#.#.#.#.#...#...#.#...#.......#...#...#.#.........#.....#.#.#.....#.#...#.#...#.#.#.......#.#.#  
  #####.#.###.#####.###.###.#.#.#.###.#.#######.#######.#.#.###.#####.#.#########.###.#####.#.###.#.#.#.###.###.#.#######.#.#.#  
  #.....#.#...#.#.........#.#.#...#...#.....#.......#.#.#.#...#.....#.....#.......#.....#.#.....#...#.#.#.........#.#.#.#.#.#.#  
  #####.###.###.###.#######.#.###.###.#.###.###.#.#.#.#.#.###.###.###.###.#.#######.#####.#.###.#.#######.###.#####.#.#.#.#.#.#  
  #...#...#.......#...#.#.#.......#.....#.....#.#.#.#...#...#.#.....#.#...#.......#.........#...#.#...#.#.#...#.#.............#  
  #.###.###.#######.###.#.#######.#########.###.#############.#.#.#####.#######.#####.#############.###.#####.#.###.#.#####.#.#  
  #...#.#...#...#...#.#.........#...#      D   O             F X P     W       G     R      #...#...#...#...#.#...#.#.#...#.#.#  
  #.###.###.#.###.###.###.###.###.###      V   V             Z F Y     X       S     V      #.#.###.#.###.###.#.#######.###.###  
  #...#...#.....#...#...#.#.#.#.#...#                                                       #.#.#.#.#.#.#.......#.....#...#...#  
  #.#####.###.###.#####.#.#.###.###.#                                                       #.#.#.#.#.#.#####.#######.#.#.#.###  
  #.#.#.............#.#.....#........JX                                                     #.#.#.#.#.#...#.....#.#...#.#.#.#.#  
  #.#.#.#########.###.#.#########.#.#                                                       #.###.#.#.#.#####.###.#.###.###.#.#  
PY....#.#.#.#.#.....#.....#.#.....#.#                                                       #...#...#.#.......................#  
  #.#.#.#.#.#.###.#####.###.#####.###                                                       ###.#.###.#.#.###.###.#.#.#.#.#.###  
  #.#.#.....#.#.#.....#.......#...#.#                                                     PP..#.......#.#.#.#.#.#.#.#.#.#.#.#.#  
  ###.#.#.###.#.###.#.#.#####.###.#.#                                                       #.###.###.###.#.###.#.#########.#.#  
  #.....#.#...#.#.#.#.....#.#.....#.#                                                       #...#.#...........#.....#...#...#..OF
  ###########.#.#.#########.#######.#                                                       #.###.#####.#########.###.###.###.#  
  #.#.#.......#.#.............#.....#                                                       #.........#.#...#.......#...#.....#  
  #.#.#.#####.#.#.###.#.#.#.#.#.###.#                                                       #.#############.###.#.###.###.#####  
OV..#...#...#...#.#.#.#.#.#.#...#...#                                                       #.#...#...........#.#.#.....#.#...#  
  #.#.#########.#.#.#####.###.#####.#                                                       ###.#.#.###.###.#########.#######.#  
  #.#.......#.#.......#...#.....#....ES                                                     #.#.#.....#.#.....#...#.#.#.....#..DV
  #.#####.###.#####.###.#############                                                       #.#.#####.###.#.###.###.#.###.###.#  
  #.........#.#.#.....#.#...#.#.#...#                                                     ZJ..#.....#.#...#.#...#.........#...#  
  #.###.#####.#.#########.###.#.#.###                                                       #.###.#.#####.#####.###.#####.#.#.#  
  #...#...#.............#.....#.....#                                                       #.....#.#.#.............#.......#.#  
  #.#######.#########.###.###.#.###.#                                                       #.#######.###########.#.###########  
  #...#...........#...#.#.#.#...#...#                                                       #.#...........#...#.#.#.......#...#  
  #######.###########.#.#.#.#####.###                                                       #.#.#########.#.#.#.#.###.#####.#.#  
  #.#.#...#.#.#...#...........#...#..BL                                                     #.#.......#.....#...#...#...#...#..GM
  #.#.#.###.#.#.#######.###.#####.#.#                                                       #########.#.#.#####.###########.###  
FZ......#.......#.#.....#.#.#.#.....#                                                     TW..#...#...#.#.#.....#.....#.#.....#  
  ###.#.#####.###.###.#.#.###.#####.#                                                       #.#.#.#.#####.#####.#.###.#.#.#####  
JX..#.#.#...#.......#.#...#.#.....#.#                                                       #...#...#.....#.#.......#.........#  
  #.#######.###.###.#######.#.###.###                                                       ###############.###.#.###.###.#.#.#  
  #.......#.......#.#...#...#.#......SI                                                     #...........#.......#.#...#...#.#.#  
  #.#######.#.###.#####.###.#.#######                                                       ###.#####.#########.#####.#########  
  #.#...#.#.#...#...#...#...#.....#.#                                                       #.....#.....#.#.#...#.#.....#...#.#  
  #.#.###.#####.###.###.###.#####.#.#                                                       #.#####.#####.#.#####.#######.#.#.#  
  #...............#...............#.#                                                       #...#...#.#.#.....#...#...#.#.#.#..RV
  ###.#########.#####.#######.#####.#                                                       ###.#.#####.#.#.###.###.###.#.###.#  
DS..#.#.#.....#...#.#.#.....#.#.....#                                                     QT....#.........#...................#  
  #.#.#.#.###.#.###.###.###.###.###.#                                                       ###############.#.#.#.#.#.#########  
  #.#.#...#...#.#.#.#...#.....#...#.#                                                       #.......#.....#.#.#.#.#.#.#.#...#..PP
  #.###.#.#.#####.#.#.#.#.###.###.#.#                                                       #.#.#.#.#.#.#######.#######.###.#.#  
  #...#.#.#.#.#.#.....#.#.#.......#..XC                                                   MJ..#.#.#...#.....#...#...#.........#  
  #.#####.#.#.#.#.###########.###.#.#                                                       ###.#.#.#.###.#########.###.#######  
  #.......#.......#...#...#...#...#.#                                                       #.#.#.#.#.#...#...#.#.....#.....#.#  
  ###################.###.###########                                                       #.#.#######.#####.#.#.#.#.#####.#.#  
  #.#.#.....#.#.....................#                                                       #.....#...#...........#.#.........#  
  #.#.#.###.#.#.#.#.#.#.###.#.#.###.#                                                       #.#.###.###########################  
  #.#.....#.....#.#.#.#.#...#.#...#.#                                                       #.#.#.#.#.#.#.........#.#...#...#..ZJ
  #.#.###.#######.###########.#.###.#                                                       #.###.#.#.#.#####.###.#.#.#.#.#.#.#  
MJ..#.#.#.......#.#...#.....#.#.#.#.#                                                       #.#.#.#.......#.#...#.....#...#...#  
  #.#########.#####.#.#####.#####.#.#                                                       ###.#.###.#.###.###.#######.###.#.#  
  #.............#.#.#...#.#.#.....#..GM                                                     #.#...#.#.#...#.#.#.....#...#...#.#  
  #####.#########.###.###.#.#####.###                                                       #.#.#.#.###.#.#.###.#######.###.#.#  
  #...#.#.....#.........#.....#...#.#                                                     GR....#.......#.........#.#...#...#.#  
  #.#.###.###.#.#.#####.#.#.#.#.#.#.#                                                       #.###.#.#####.#####.#.#.#.#.###.###  
  #.#.......#...#.#.......#.#...#...#                                                       #.#...#.#.#...#...#.#.#...#...#.#.#  
  #.#.###.###.#.#.###.#.#####.#####.#                                                       #.#.#.#.#.###.###.#####.#.#.###.#.#  
  #.#...#.#...#.#...#.#.#...#.#......DS                                                     #.#.#.#.#...........#...#.#...#...#  
  #.###.#########.###.#.###.#####.#.#                                                       #.#####.###.#.#.#.#.#.#####.#.#.#.#  
GH....#.....#.....#...#.....#.....#.#                                                       #.....#.#.#.#.#.#.#.#...#.#.#.#.#.#  
  #.#.#.#.#.#########.#.###.###.#####          W     J   L         Z           G       O    ###.#.#.#.#.#.###.#.#####.#.###.#.#  
  #.#.#.#.#...#.#.....#.#.#...#...#.#          N     S   E         H           H       F    #.#.#.#...#.#...#.#.#.......#.#.#.#  
  ###.#.###.###.###.###.#.###.#.###.###########.#####.###.#########.###########.#######.#####.#######.#.###.###.#####.#.#.#####  
  #...#.#...#.......#.#...#...#...#.#.#.....#.#.#.#.#...#.#.....#...#...........#.#.....#.#...#...#...#...#...#.#.....#.......#  
  #.#######.#.#.#.#.#.#.#####.#.###.#.#####.#.#.#.#.###.#.#.#.###.###.###.#######.#####.#.#.###.###.#######.###.#.#####.###.###  
  #...#.#...#.#.#.#.#.......#.#.#...#...#.......#...#...#...#...#...#...#.........#...............#.....#.#.#...#.#.....#.....#  
  #.#.#.#.#.#####.#####.#.#####.###.###.###.#####.#.#.#########.#.###.###.#.#.#.#.#####.#.###.#####.#.###.###.#.###########.###  
  #.#.#...#...#.#.....#.#.#.#...#.#.........#.#.#.#.....#.......#.#.#...#.#.#.#.#.#.....#.#.#...#.#.#.#.......#...#.....#.....#  
  #.###.#.###.#.###.#.#####.#.#.#.#######.###.#.#.#########.#.###.#.#.###.###.#########.###.#####.###########.#.#######.###.###  
  #...#.#.#.......#.#.#.......#.#...............#.........#.#...#...#.#.#.#.......#...#.........#.#.#.#.#.....#.#.............#  
  #.###.#.#######.#####.#.###.#.###.#########.#.#######.###.#######.###.#.#.###.#####.#.#########.#.#.#.#####.###########.#####  
  #.#...#.....#.....#.#.#.#...#.#...#.......#.#.#.........#.#...#.....#.#.#.#.....#.....#.....#...........#.......#.........#.#  
  #.#####.#.###.###.#.###.###.#.###.#####.#.###.#.###.#.#.#.#.#.#.#####.#.###.#########.###.###.###.###.#####.#.#########.###.#  
  #.#.#.#.#.#.....#.#...#...#.#.#...#.....#.....#...#.#.#.#...#.#.....#.#.#.....#.#.....#.........#.#.....#...#...#...........#  
  #.#.#.#####.#.#####.###.###########.###.###.###.#.#.#####.###.###.###.###.###.#.#####.#.#####.#########.#.###.#####.#.###.#.#  
  #.......#...#...#.........#...#...#.#.#...#...#.#.#.#.....#.#...#.....#...#...#.#.........#.#.......#.#.#.#.#...#...#...#.#.#  
  #.#.#######.#.#.#.###.#.###.#.#.#####.#.###.###.###.###.###.#.#######.#######.#.#.#######.#.#.#.#####.###.#.#####.#.###.#.#.#  
  #.#.....#...#.#.#.#...#.#...#.......#.....#.#.#...#.#.....#.#.#.....#.#.......#.....#.#.#.#.#.#.#...#.#...#.....#.#.#...#.#.#  
  #.#.#.#.#####.#######.#.#.#########.###.#.###.#.#.#########.#.#.###.#.#######.#####.#.#.###.#####.###.#####.###.###.#####.#.#  
  #.#.#.#.....#.#...#.#.#.#.#.#...........#.#.#...#.#...#...#...#.#.#.....#.....#.#...............#...#.#...#...#.........#.#.#  
  #.###.#.#####.###.#.#######.###########.###.#.#.###.#.#.#####.#.#.###.#######.#.#####.#.#.#####.#.###.#.#.#####.#.###.#####.#  
  #.#...#.#...#.#.....#.#.#.........#.#.#.#...#.#.#.#.#.....#.#.#.#...#.#...........#...#.#.....#...#.....#.#...#.#.#.....#...#  
  #.#########.#####.###.#.###.###.#.#.#.#.###.###.#.#####.###.#.#.###.###.###.#.#.###.#.#############.###.#.###.#.###.#######.#  
  #...#...............#...#...#...#.....#.......#.......#.....#.#...#.#...#...#.#.#...#.........#.#...#.#.#...#...#.........#.#  
  #.#####.###.#######.###.#######.###.#.#.#########.#.#####.#.#.#.#############.#######.###.#####.#.###.#####.#.#.#.#.#.###.###  
  #.#.#...#...#.#...#.#.#.........#.#.#.......#.#...#.#...#.#.#.#...#.#.....#...#...#.#.#.#.#...........#.#...#.#.#.#.#...#...#  
  #.#.###.#####.###.#.#.###.#.#.###.###.#####.#.#.#######.#.#.#.#.###.#####.#.#####.#.#.#.###.#####.#.#.#.###########.#####.###  
  #...#.....#...............#.#...#.........#...#.#...#.#...#...#.....#.....#.#...........#.......#.#.#...#.....#.#.......#...#  
  #####.#######.###.###.#######.#######.#.#.#.#.#.#.###.###.#.#.#.###.###.#.#.###.###.#####.###.###.#.#.###.###.#.###.#######.#  
  #.....#.......#...#.....#.....#.......#.#.#.#.#.....#.#...#.#.#.#.....#.#...#.....#.......#.#...#.#.#.....#.#.#.#.#...#...#.#  
  ###############.###.#.#####.#######.#######.#.#####.#.#.#######.#####.#.#######.###########.###########.###.###.#.#.#####.###  
  #.#.#...#.#.#.#.#.#.#.#.......#.......#...#.#...#.....#.....#.#...#.#.#.......#.#.#...#...............#...........#.#.......#  
  #.#.###.#.#.#.###.###.#.#.#.###.#########.###.###.#.#####.###.###.#.#####.#####.#.#.###.#.#######.###.###.#.#.#.#######.#.###  
  #.........#...........#.#.#...#.#.......#.....#.#.#...#.........#.....#.......#.......#.#...#.#.#...#.#.#.#.#.#.........#.#.#  
  #.###.#.#.#.#.#.###.#.###.###.#######.###.#####.###.#.#.#######.#####.#.#######.###.#.#.###.#.#.#####.#.###.###.###.###.#.#.#  
  #.#...#.#...#.#.#...#.#.....#.#.................#...#.#.......#.#.....#.......#.#...#.....#.........#.....#.#.....#.#...#...#  
  ###########################################.#.#######.###.#########.#######.#########.#######################################  
                                             B A       W   G         G       T         E                                         
                                             L A       X   R         S       W         S                                         `
